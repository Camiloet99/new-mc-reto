<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/test/java/org/mercadolibre/camilo/category/repository/impl/CategoryRepositoryImplTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/org/mercadolibre/camilo/category/repository/impl/CategoryRepositoryImplTest.java" />
              <option name="originalContent" value="package org.mercadolibre.camilo.category.repository.impl;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import org.mercadolibre.camilo.category.exception.CategoriesDataLoadException;&#10;import org.mercadolibre.camilo.category.model.Category;&#10;import org.springframework.core.io.AbstractResource;&#10;import org.springframework.core.io.ByteArrayResource;&#10;import org.springframework.core.io.Resource;&#10;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.nio.charset.StandardCharsets;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;import static org.assertj.core.api.Assertions.*;&#10;&#10;/**&#10; * Unit tests for {@link CategoryRepositoryImpl} focusing on constructor loading logic and public API behavior.&#10; */&#10;class CategoryRepositoryImplTest {&#10;&#10;    // Use an ObjectMapper configured like Spring Boot (register modules: parameter names, etc.)&#10;    private ObjectMapper mapper() {&#10;        return new ObjectMapper().findAndRegisterModules();&#10;    }&#10;&#10;    private Resource json(String content) {&#10;        return new ByteArrayResource(content.getBytes(StandardCharsets.UTF_8)) {&#10;            @Override&#10;            public String getDescription() {&#10;                return &quot;in-memory-json&quot;;&#10;            }&#10;        };&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Loads valid categories and builds children index&quot;)&#10;    void loadValidCategories_buildsIndices() {&#10;        String data = &quot;&quot;&quot;&#10;                [&#10;                  {&quot;id&quot;:&quot;root&quot;,&quot;name&quot;:&quot;Root&quot;},&#10;                  {&quot;id&quot;:&quot;c1&quot;,&quot;name&quot;:&quot;Child 1&quot;,&quot;parentId&quot;:&quot;root&quot;},&#10;                  {&quot;id&quot;:&quot;c2&quot;,&quot;name&quot;:&quot;Child 2&quot;,&quot;parentId&quot;:&quot;root&quot;}&#10;                ]&#10;                &quot;&quot;&quot;;&#10;        CategoryRepositoryImpl repo = new CategoryRepositoryImpl(json(data), mapper());&#10;&#10;        assertThat(repo.findById(&quot;root&quot;)).isPresent();&#10;        assertThat(repo.findById(&quot;c1&quot;)).isPresent();&#10;        assertThat(repo.findById(&quot;c2&quot;)).isPresent();&#10;        assertThat(repo.findById(&quot;missing&quot;)).isNotPresent();&#10;&#10;        List&lt;Category&gt; children = repo.childrenOf(&quot;root&quot;);&#10;        assertThat(children).hasSize(2).extracting(Category::getId).containsExactly(&quot;c1&quot;, &quot;c2&quot;);&#10;&#10;        assertThat(repo.childrenOf(&quot;unknown&quot;)).isEmpty();&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;childrenOf returns immutable empty list for unknown id&quot;)&#10;    void childrenOfUnknown_isEmptyImmutable() {&#10;        String data = &quot;[]&quot;; // empty dataset&#10;        CategoryRepositoryImpl repo = new CategoryRepositoryImpl(json(data), mapper());&#10;&#10;        List&lt;Category&gt; children = repo.childrenOf(&quot;nope&quot;);&#10;        assertThat(children).isEmpty();&#10;        assertThatThrownBy(() -&gt; children.add(Category.builder().id(&quot;x&quot;).name(&quot;X&quot;).parentId(&quot;nope&quot;).build()))&#10;                .isInstanceOf(UnsupportedOperationException.class);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Duplicate ids resolved last-wins in byId map&quot;)&#10;    void duplicates_lastWins() {&#10;        String data = &quot;&quot;&quot;&#10;                [&#10;                  {&quot;id&quot;:&quot;X&quot;,&quot;name&quot;:&quot;First&quot;},&#10;                  {&quot;id&quot;:&quot;X&quot;,&quot;name&quot;:&quot;Second&quot;}&#10;                ]&#10;                &quot;&quot;&quot;;&#10;        CategoryRepositoryImpl repo = new CategoryRepositoryImpl(json(data), mapper());&#10;&#10;        Category x = repo.findById(&quot;X&quot;).orElseThrow();&#10;        assertThat(x.getName()).isEqualTo(&quot;Second&quot;); // last entry wins&#10;        assertThat(repo.getById()).hasSize(1);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Indices (byId and children lists) are unmodifiable&quot;)&#10;    void indices_areUnmodifiable() {&#10;        String data = &quot;&quot;&quot;&#10;                [&#10;                  {&quot;id&quot;:&quot;root&quot;,&quot;name&quot;:&quot;Root&quot;},&#10;                  {&quot;id&quot;:&quot;c1&quot;,&quot;name&quot;:&quot;Child 1&quot;,&quot;parentId&quot;:&quot;root&quot;}&#10;                ]&#10;                &quot;&quot;&quot;;&#10;        CategoryRepositoryImpl repo = new CategoryRepositoryImpl(json(data), mapper());&#10;&#10;        Map&lt;String, Category&gt; byId = repo.getById();&#10;        assertThatThrownBy(() -&gt; byId.put(&quot;new&quot;, Category.builder().id(&quot;new&quot;).name(&quot;New&quot;).build()))&#10;                .isInstanceOf(UnsupportedOperationException.class);&#10;&#10;        List&lt;Category&gt; children = repo.childrenOf(&quot;root&quot;);&#10;        assertThat(children).hasSize(1);&#10;        assertThatThrownBy(() -&gt; children.add(Category.builder().id(&quot;c2&quot;).name(&quot;Child 2&quot;).parentId(&quot;root&quot;).build()))&#10;                .isInstanceOf(UnsupportedOperationException.class);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Malformed JSON triggers CategoriesDataLoadException&quot;)&#10;    void malformedJson_throws() {&#10;        String data = &quot;[{&quot;; // invalid JSON&#10;        assertThatThrownBy(() -&gt; new CategoryRepositoryImpl(json(data), mapper()))&#10;                .isInstanceOf(CategoriesDataLoadException.class);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;I/O error while reading resource triggers CategoriesDataLoadException&quot;)&#10;    void ioError_throws() {&#10;        Resource broken = new AbstractResource() {&#10;            @Override&#10;            public String getDescription() { return &quot;broken-resource&quot;; }&#10;            @Override&#10;            public InputStream getInputStream() throws IOException { throw new IOException(&quot;boom&quot;); }&#10;        };&#10;        assertThatThrownBy(() -&gt; new CategoryRepositoryImpl(broken, mapper()))&#10;                .isInstanceOf(CategoriesDataLoadException.class);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.mercadolibre.camilo.category.repository.impl;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import org.mercadolibre.camilo.category.exception.CategoriesDataLoadException;&#10;import org.mercadolibre.camilo.category.model.Category;&#10;import org.springframework.core.io.AbstractResource;&#10;import org.springframework.core.io.ByteArrayResource;&#10;import org.springframework.core.io.Resource;&#10;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.nio.charset.StandardCharsets;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;import static org.assertj.core.api.Assertions.*;&#10;&#10;/**&#10; * Unit tests for {@link CategoryRepositoryImpl} focusing on constructor loading logic and public API behavior.&#10; */&#10;class CategoryRepositoryImplTest {&#10;&#10;    // Use an ObjectMapper configured like Spring Boot (register modules: parameter names, etc.)&#10;    private ObjectMapper mapper() {&#10;        return new ObjectMapper().findAndRegisterModules();&#10;    }&#10;&#10;    private Resource json(String content) {&#10;        return new ByteArrayResource(content.getBytes(StandardCharsets.UTF_8)) {&#10;            @Override&#10;            public String getDescription() {&#10;                return &quot;in-memory-json&quot;;&#10;            }&#10;        };&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Loads valid categories and builds children index&quot;)&#10;    void loadValidCategories_buildsIndices() {&#10;        String data = &quot;&quot;&quot;&#10;                [&#10;                  {&quot;id&quot;:&quot;root&quot;,&quot;name&quot;:&quot;Root&quot;},&#10;                  {&quot;id&quot;:&quot;c1&quot;,&quot;name&quot;:&quot;Child 1&quot;,&quot;parentId&quot;:&quot;root&quot;},&#10;                  {&quot;id&quot;:&quot;c2&quot;,&quot;name&quot;:&quot;Child 2&quot;,&quot;parentId&quot;:&quot;root&quot;}&#10;                ]&#10;                &quot;&quot;&quot;;&#10;        CategoryRepositoryImpl repo = new CategoryRepositoryImpl(json(data), mapper());&#10;&#10;        assertThat(repo.findById(&quot;root&quot;)).isPresent();&#10;        assertThat(repo.findById(&quot;c1&quot;)).isPresent();&#10;        assertThat(repo.findById(&quot;c2&quot;)).isPresent();&#10;        assertThat(repo.findById(&quot;missing&quot;)).isNotPresent();&#10;&#10;        List&lt;Category&gt; children = repo.childrenOf(&quot;root&quot;);&#10;        assertThat(children).hasSize(2).extracting(Category::getId).containsExactly(&quot;c1&quot;, &quot;c2&quot;);&#10;&#10;        assertThat(repo.childrenOf(&quot;unknown&quot;)).isEmpty();&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;childrenOf returns immutable empty list for unknown id&quot;)&#10;    void childrenOfUnknown_isEmptyImmutable() {&#10;        String data = &quot;[]&quot;; // empty dataset&#10;        CategoryRepositoryImpl repo = new CategoryRepositoryImpl(json(data), mapper());&#10;&#10;        List&lt;Category&gt; children = repo.childrenOf(&quot;nope&quot;);&#10;        assertThat(children).isEmpty();&#10;        assertThatThrownBy(() -&gt; children.add(Category.builder().id(&quot;x&quot;).name(&quot;X&quot;).parentId(&quot;nope&quot;).build()))&#10;                .isInstanceOf(UnsupportedOperationException.class);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Duplicate ids resolved last-wins in byId map&quot;)&#10;    void duplicates_lastWins() {&#10;        String data = &quot;&quot;&quot;&#10;                [&#10;                  {&quot;id&quot;:&quot;X&quot;,&quot;name&quot;:&quot;First&quot;},&#10;                  {&quot;id&quot;:&quot;X&quot;,&quot;name&quot;:&quot;Second&quot;}&#10;                ]&#10;                &quot;&quot;&quot;;&#10;        CategoryRepositoryImpl repo = new CategoryRepositoryImpl(json(data), mapper());&#10;&#10;        Category x = repo.findById(&quot;X&quot;).orElseThrow();&#10;        assertThat(x.getName()).isEqualTo(&quot;Second&quot;); // last entry wins&#10;        assertThat(repo.getById()).hasSize(1);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Indices (byId and children lists) are unmodifiable&quot;)&#10;    void indices_areUnmodifiable() {&#10;        String data = &quot;&quot;&quot;&#10;                [&#10;                  {&quot;id&quot;:&quot;root&quot;,&quot;name&quot;:&quot;Root&quot;},&#10;                  {&quot;id&quot;:&quot;c1&quot;,&quot;name&quot;:&quot;Child 1&quot;,&quot;parentId&quot;:&quot;root&quot;}&#10;                ]&#10;                &quot;&quot;&quot;;&#10;        CategoryRepositoryImpl repo = new CategoryRepositoryImpl(json(data), mapper());&#10;&#10;        Map&lt;String, Category&gt; byId = repo.getById();&#10;        assertThatThrownBy(() -&gt; byId.put(&quot;new&quot;, Category.builder().id(&quot;new&quot;).name(&quot;New&quot;).build()))&#10;                .isInstanceOf(UnsupportedOperationException.class);&#10;&#10;        List&lt;Category&gt; children = repo.childrenOf(&quot;root&quot;);&#10;        assertThat(children).hasSize(1);&#10;        assertThatThrownBy(() -&gt; children.add(Category.builder().id(&quot;c2&quot;).name(&quot;Child 2&quot;).parentId(&quot;root&quot;).build()))&#10;                .isInstanceOf(UnsupportedOperationException.class);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Malformed JSON triggers CategoriesDataLoadException&quot;)&#10;    void malformedJson_throws() {&#10;        String data = &quot;[{&quot;; // invalid JSON&#10;        assertThatThrownBy(() -&gt; new CategoryRepositoryImpl(json(data), mapper()))&#10;                .isInstanceOf(CategoriesDataLoadException.class);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;I/O error while reading resource triggers CategoriesDataLoadException&quot;)&#10;    void ioError_throws() {&#10;        Resource broken = new AbstractResource() {&#10;            @Override&#10;            public String getDescription() { return &quot;broken-resource&quot;; }&#10;            @Override&#10;            public InputStream getInputStream() throws IOException { throw new IOException(&quot;boom&quot;); }&#10;        };&#10;        assertThatThrownBy(() -&gt; new CategoryRepositoryImpl(broken, mapper()))&#10;                .isInstanceOf(CategoriesDataLoadException.class);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Blank parentId values are ignored (not indexed as children)&quot;)&#10;    void blankParentIdIgnored() {&#10;        String data = &quot;&quot;&quot;&#10;                [&#10;                  {&quot;id&quot;:&quot;root&quot;,&quot;name&quot;:&quot;Root&quot;},&#10;                  {&quot;id&quot;:&quot;cBlank&quot;,&quot;name&quot;:&quot;Child Blank&quot;,&quot;parentId&quot;:&quot;&quot;},&#10;                  {&quot;id&quot;:&quot;cSpaces&quot;,&quot;name&quot;:&quot;Child Spaces&quot;,&quot;parentId&quot;:&quot;  &quot;}&#10;                ]&#10;                &quot;&quot;&quot;;&#10;        CategoryRepositoryImpl repo = new CategoryRepositoryImpl(json(data), mapper());&#10;        assertThat(repo.childrenOf(&quot;root&quot;)).isEmpty();&#10;        assertThat(repo.getById()).hasSize(3);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>